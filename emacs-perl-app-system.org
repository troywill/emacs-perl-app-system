* Step By Step
  1. [0/4] Preliminary Setup
     1. [ ] Specify application name
	#+NAME: application_name
	#+BEGIN_SRC conf
	  myapp
	#+END_SRC
     2. [ ] Specify application directory, e.g., /home/troy/myapp
	#+NAME: application_directory
	#+BEGIN_SRC conf
	   ~/rideshare
	#+END_SRC
     3. [ ] Create the application directory if it doesn't already exist file:./tmp/make_app_dir.sh
	#+BEGIN_SRC sh :tangle ./tmp/make_app_dir.sh :shebang #!/usr/bin/env bash :noweb yes 
	  mkdir --parent --verbose <<application_directory>>
	#+END_SRC
     4. [ ] copy this Org file to ~/path/to/app file:./tmp/copy
	#+BEGIN_SRC sh :tangle ./tmp/copy :shebang /usr/bin/bash :noweb yes
	  cp --interactive --verbose ./emacs-perl-app-system.org <<application_directory>>/<<application_name>>.org
	#+END_SRC
* MAIN PROGRAM	 
  #+BEGIN_SRC perl :tangle bin/NEW_PROGRAM.pl :shebang #!/usr/bin/env perl :noweb yes
    <<NEW_PROGRAM-pragma-block>>
    <<NEW_PROGRAM-path-block>>
    <<NEW_PROGRAM-configuration-block>>
    <<NEW_PROGRAM-get-options-block>>
  #+END_SRC
** help_subroutine
   #+NAME: help_subroutine
   #+BEGIN_SRC perl
     sub help {
         print <<END;
         --calibrate
	 --two_pi
	 --surgeonly
	 --verbose
	 --zoom
     END
         exit;
     }
   #+END_SRC

** NEW_PROGRAM pragma-block
   + See http://perldoc.perl.org/perlpragma.html
   #+NAME: NEW_PROGRAM-pragma-block
   #+BEGIN_SRC perl
     use warnings;
     use strict;
   #+END_SRC
** NEW_PROGRAM path-block
   #+NAME: NEW_PROGRAM-path-block
   #+BEGIN_SRC perl
     ###### path-block ############
     use FindBin qw($Bin);        #
     use File::Basename;          #
     use lib "$Bin/../lib";       #
     require "NEW_PROGRAM.pm"; #
     ##############################
   #+END_SRC
** NEW_PROGRAM configuration-block
   #+NAME: NEW_PROGRAM-configuration-block
   #+BEGIN_SRC perl
     ###### begin configuration-block ########### 
     use AppConfig;                               
                                                  
     # create a new AppConfig object              
     my $config = AppConfig->new;                 
                                                  
     # define a new variable                      
     # $config->define('LOCAL_DATABASE=s');       
     $config->define("VAR1=s");                   
                                                  
     # read configuration file                    
                                                  
     print "$Bin <==\n";                          
     $config->file("$Bin/../conf/NEW_PROGRAM.conf");            
                                                  
     my $VAR1 = $config->get("VAR1");             
                                                  
     print "VAR1 = $VAR1\n";                      
     ############ end configuration-block ####### 
   #+END_SRC					 
*** Configuration file
    #+BEGIN_SRC conf :tangle ./conf/NEW_PROGRAM.conf
      VAR1=3.14
    #+END_SRC    
*** [[http://search.cpan.org/~abw/AppConfig/][AppConfig]] by [[http://search.cpan.org/~abw/][Andy Wardley]]
** NEW_PROGRAM command-line-options-block
   #+NAME: NEW_PROGRAM-configuration-block
   #+BEGIN_SRC perl
     #### BEGIN GETOPTIONS BLOCK
     use Getopt::Long;
     my ($verbose, $help, $calibrate); #flags

     GetOptions ("zoom=i" => \$zoom,            # numeric
                 "screenshot=s"   => \$screenshot, # string
                 "verbose"  => \$verbose,       # flag
                 "help"     => \$help )       # flag
         or die("Error in command line arguments\n");
     #### END GETOPTIONS BLOCK
   #+END_SRC

* NEW_PROGRAM Library (NEW_PROGRAM.pm)
** NEW_PROGRAM.pm
   #+BEGIN_SRC perl :tangle ./lib/NEW_PROGRAM.pm :padline no :noweb yes
     use warnings;
     use strict;
     <<make-image-dir-subroutine>>
     <<second-subroutine>>
     <<third-subroutine>>
     1;
   #+END_SRC    
*** make-image_dir-subroutine
    #+name: make-image-dir-subroutine
    #+BEGIN_SRC perl
      sub make_image_dir {
          use File::Path qw(make_path);
          my ( $base_dir, $camera_name ) = @_;
          my ( $year, $mon, $day, $hour, $min, $sec ) = foscam_localtime();
          my $directory = "$base_dir/$year/$mon/$day/$camera_name/";
          if ( ! -e $directory ) {
              make_path($directory, { verbose => 1 }) or die "Unable to mkdir --parent $directory";
          }
          return $directory;
      }
    #+END_SRC    
*** NEW_PROGRAM-second_subroutine
*** NEW_PROGRAM-third-subroutine
* Testing => http://www.perl.org/about/whitepapers/perl-testing.html
