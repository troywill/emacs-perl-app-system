* Step By Step
  1. [ ] replace 'MY_PROGRAM_NAME' with the name of your Perl program in this Org file
  2. [ ] run shell script to set up program directories
     #+BEGIN_SRC shell
     mkdir bin lib conf testing troubleshooting
       # rm -rvf bin lib conf testing troubleshooting
     #+END_SRC
  3. [ ] tangle files
     #+BEGIN_SRC example
       C-c C-v C-t runs the command org-babel-tangle (found in org-mode-map),
     #+END_SRC
* MAIN PROGRAM <file:./bin/MY_PROGRAM_NAME>
  #+BEGIN_SRC perl :tangle ./bin/MY_PROGRAM_NAME :shebang #!/usr/bin/env perl :noweb yes
    <<PRAGMA_BLOCK>>
    <<PATH_BLOCK>>
    <<CONFIGURATION_BLOCK>>
    <<MAIN_PROGRAM_LOGIC>>

    help() if $help;
    <<HELP_SUBROUTINE>>
  #+END_SRC
** PRAGMA_BLOCK
   + See http://perldoc.perl.org/perlpragma.html
   #+NAME: PRAGMA_BLOCK
   #+BEGIN_SRC perl
     use v5.24.0;
     use warnings;
     use strict;
   #+END_SRC
** PATH_BLOCK <file:./bin/MY_PROGRAM_NAME::PATH_BLOCK> 
   + http://perldoc.perl.org/FindBin.html
   #+NAME: PATH_BLOCK
   #+BEGIN_SRC perl

     ########## PATH_BLOCK_BEGIN ##########
     # Set paths and load program modules
     use FindBin qw($Bin);
     use File::Basename;
     use lib "$Bin/../lib";
     require "MY_PROGRAM_NAME.pm";
     ########## PATH_BLOCK_END ############
   #+END_SRC
** CONFIGURATION_BLOCK <file:./bin/MY_PROGRAM_NAME::CONFIGURATION_BLOCK> 
   + See http://search.cpan.org/~neilb/AppConfig/
   #+NAME: CONFIGURATION_BLOCK
   #+BEGIN_SRC perl

     ########## CONFIGURATION_BLOCK_BEGIN ##########
     use AppConfig;                               
     # create a new AppConfig object
     my $config = AppConfig->new( );

     $config->define("help");
     $config->define("verbose");
     $config->define("debug");
     $config->define("VAR1=s");                   

     # read configuration file                    
     $config->file("$Bin/../conf/MY_PROGRAM_NAME.conf");

     # parse command line options
     $config->getopt();

     my $VAR1 = $config->get("VAR1");
     my $help = $config->get("help");
     my $verbose = $config->get("verbose");
     ############ CONFIGURATION_BLOCK_END ##############
   #+END_SRC
*** Configuration file <file:./conf/MY_PROGRAM_NAME.conf>
    #+BEGIN_SRC conf :tangle ./conf/MY_PROGRAM_NAME.conf
      VAR1=3.14
    #+END_SRC    
*** [[http://search.cpan.org/~abw/AppConfig/][AppConfig]] by [[http://search.cpan.org/~abw/][Andy Wardley]]
**** SYNOPSIS
     #+BEGIN_SRC perl
       use AppConfig;

       # create a new AppConfig object
       my $config = AppConfig->new( \%cfg );

       # define a new variable
       $config->define( $varname => \%varopts );

       # create/define combined
       my $config = AppConfig->new( \%cfg, 
           $varname => \%varopts,
           $varname => \%varopts,
           ...
       );

       # set/get the value
       $config->set( $varname, $value );
       $config->get($varname);

       # shortcut form
       $config->varname($value);
       $config->varname;

       # read configuration file
       $config->file($file);

       # parse command line options
       $config->args(\@args);      # default to \@ARGV

       # advanced command line options with Getopt::Long
       $config->getopt(\@args);    # default to \@ARGV

       # parse CGI parameters (GET method)
       $config->cgi($query);       # default to $ENV{ QUERY_STRING }
     #+END_SRC
** MAIN_PROGRAM_LOGIC <file:./bin/MY_PROGRAM_NAME::MAIN_PROGRAM_LOGIC_BEGIN>
   TBL_NAME: MAIN_VARIABLE_TABLE
   | Variable | Description | Remark |
   |----------+-------------+--------|
   |          |             |        |
   #+NAME: MAIN_PROGRAM_LOGIC
   #+BEGIN_SRC perl

     ########## MAIN_PROGRAM_LOGIC_BEGIN ##########
     say "Hello, world!";
     subroutine_1();
     subroutine_2();
     subroutine_3();
     ########## MAIN_PROGRAM_LOGIC_END ############
   #+END_SRC
** HELP_SUBROUTINE <file:./bin/MY_PROGRAM_NAME::HELP_SUBROUTINE>
   #+NAME: HELP_SUBROUTINE
   #+BEGIN_SRC perl

     ########## HELP_SUBROUTINE_BEGIN ##########
     sub help {
         print <<END;
	 --help
	 --verbose
	 --debug
     END
         exit;
     }
     ########## HELP_SUBROUTINE_END ############
   #+END_SRC
** COMMAND_LINE_OPTIONS_BLOCK
   #+NAME: MY_PROGRAM_NAME-command-line-options-block
   #+BEGIN_SRC perl
     ########## BEGIN GETOPTIONS BLOCK ##########
     use Getopt::Long;
     my ($zoom, $screenshot, $verbose, $help);

     GetOptions ("zoom=i" => \$zoom,               # numeric
                 "screenshot=s"   => \$screenshot, # string
                 "verbose"  => \$verbose,          # flag
                 "help"     => \$help )            # flag
         or die("Error in command line arguments\n");
     ########## END GETOPTIONS BLOCK ############
   #+END_SRC
* LIBRARY (file:./lib/MY_PROGRAM_NAME.pm) 
** MY_PROGRAM_NAME.pm
   #+BEGIN_SRC perl :tangle ./lib/MY_PROGRAM_NAME.pm :padline no :noweb yes
     use warnings;
     use strict;
     <<SUBROUTINE_1>>
     <<SUBROUTINE_2>>
     <<SUBROUTINE_3>>
     1;
   #+END_SRC    
*** SUBROUTINE_1 <file:./lib/MY_PROGRAM_NAME.pm::subroutine_1> 
    #+name: SUBROUTINE_1
    #+BEGIN_SRC perl
      sub subroutine_1 {
          print "subroutine_1: ", my $date = localtime(), "\n";
      }
    #+END_SRC    
*** SUBROUTINE_2 <file:./lib/MY_PROGRAM_NAME.pm::subroutine_2> 
    #+name: SUBROUTINE_2
    #+BEGIN_SRC perl
      sub subroutine_2 {
          return 1;
      }
    #+END_SRC    
*** SUBROUTINE_3 <file:./lib/MY_PROGRAM_NAME.pm::subroutine_3> 
    #+name: SUBROUTINE_3
    #+BEGIN_SRC perl
      sub subroutine_3 {
          return 1;
      }
    #+END_SRC    
* Testing => http://www.perl.org/about/whitepapers/perl-testing.html
* Troubleshooting
* Developer's Log
