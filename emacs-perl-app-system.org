* Step By Step
  1. [0/4] Preliminary Setup
     1. [ ] Specify application name
	#+NAME: application_name
	#+BEGIN_SRC conf
	  myapp
	#+END_SRC
     2. [ ] Specify application directory, e.g., /home/troy/myapp
	#+NAME: application_directory
	#+BEGIN_SRC conf
	   ~/rideshare
	#+END_SRC
     3. [ ] Create the application directory if it doesn't already exist file:./tmp/make_app_dir.sh
	#+BEGIN_SRC shell :tangle ./tmp/make_app_dir.sh :shebang #!/usr/bin/env bash :noweb yes 
	  mkdir --parent --verbose <<application_directory>>
	#+END_SRC
     4. [ ] copy this Org file to ~/path/to/app file:./tmp/copy
	#+BEGIN_SRC shell :tangle ./tmp/copy :shebang /usr/bin/bash :noweb yes
	  cp --interactive --verbose ./emacs-perl-app-system.org <<application_directory>>/<<application_name>>.org
	#+END_SRC
* MAIN PROGRAM file:./bin/NEW_PROGRAM.pl
  #+BEGIN_SRC perl :tangle ./bin/NEW_PROGRAM.pl :shebang #!/usr/bin/env perl :noweb yes
    <<NEW_PROGRAM-pragma-block>>
    <<NEW_PROGRAM-path-block>>
    <<NEW_PROGRAM-configuration-block>>
    print "DEBUG: ==>$help<==\n";
    help() if $help;
    <<help_subroutine>>

  #+END_SRC
** help_subroutine
   #+NAME: help_subroutine
   #+BEGIN_SRC perl
     sub help {
         print <<END;
         --calibrate
	 --two_pi
	 --surgeonly
	 --verbose
	 --zoom
     END
         exit;
     }
   #+END_SRC

** NEW_PROGRAM pragma-block
   + See http://perldoc.perl.org/perlpragma.html
   #+NAME: NEW_PROGRAM-pragma-block
   #+BEGIN_SRC perl
     use warnings;
     use strict;
   #+END_SRC
** NEW_PROGRAM path-block
   #+NAME: NEW_PROGRAM-path-block
   #+BEGIN_SRC perl
     ###### path-block ############
     use FindBin qw($Bin);        #
     use File::Basename;          #
     use lib "$Bin/../lib";       #
     require "NEW_PROGRAM.pm";    #
     ##############################
   #+END_SRC
** NEW_PROGRAM configuration-block
   #+NAME: NEW_PROGRAM-configuration-block
   #+BEGIN_SRC perl
     ########## BEGIN CONFIGURATION ##########
     use AppConfig;                               
     # create a new AppConfig object
     my $config = AppConfig->new( );

     $config->define("help");
     $config->define("verbose");
     $config->define("debug");
     $config->define("VAR1=s");                   

     # read configuration file                    
     $config->file("$Bin/../conf/NEW_PROGRAM.conf");

     # parse command line options
     $config->getopt();

     my $VAR1 = $config->get("VAR1");
     my $help = $config->get("help");
     my $verbose = $config->get("verbose");
     print "$Bin <==\n" if $verbose;                          

     ############ END CONFIGURATION ############
   #+END_SRC
*** Configuration file
    #+BEGIN_SRC conf :tangle ./conf/NEW_PROGRAM.conf
      VAR1=3.14
    #+END_SRC    
*** [[http://search.cpan.org/~abw/AppConfig/][AppConfig]] by [[http://search.cpan.org/~abw/][Andy Wardley]]
**** SYNOPSIS
     #+BEGIN_SRC perl
       use AppConfig;

       # create a new AppConfig object
       my $config = AppConfig->new( \%cfg );

       # define a new variable
       $config->define( $varname => \%varopts );

       # create/define combined
       my $config = AppConfig->new( \%cfg, 
           $varname => \%varopts,
           $varname => \%varopts,
           ...
       );

       # set/get the value
       $config->set( $varname, $value );
       $config->get($varname);

       # shortcut form
       $config->varname($value);
       $config->varname;

       # read configuration file
       $config->file($file);

       # parse command line options
       $config->args(\@args);      # default to \@ARGV

       # advanced command line options with Getopt::Long
       $config->getopt(\@args);    # default to \@ARGV

       # parse CGI parameters (GET method)
       $config->cgi($query);       # default to $ENV{ QUERY_STRING }
     #+END_SRC
** NEW_PROGRAM command-line-options-block
   #+NAME: NEW_PROGRAM-command-line-options-block
   #+BEGIN_SRC perl
     ########## BEGIN GETOPTIONS BLOCK ########## FOO
     use Getopt::Long;
     my ($zoom, $screenshot, $verbose, $help);

     GetOptions ("zoom=i" => \$zoom,               # numeric
                 "screenshot=s"   => \$screenshot, # string
                 "verbose"  => \$verbose,          # flag
                 "help"     => \$help )            # flag
         or die("Error in command line arguments\n");
     ########## END GETOPTIONS BLOCK ############
   #+END_SRC
* NEW_PROGRAM Library (NEW_PROGRAM.pm)
** NEW_PROGRAM.pm
   #+BEGIN_SRC perl :tangle ./lib/NEW_PROGRAM.pm :padline no :noweb yes
     use warnings;
     use strict;
     <<make-image-dir-subroutine>>
     <<second-subroutine>>
     <<third-subroutine>>
     1;
   #+END_SRC    
*** make-image_dir-subroutine
    #+name: make-image-dir-subroutine
    #+BEGIN_SRC perl
      sub make_image_dir {
          use File::Path qw(make_path);
          my ( $base_dir, $camera_name ) = @_;
          my ( $year, $mon, $day, $hour, $min, $sec ) = foscam_localtime();
          my $directory = "$base_dir/$year/$mon/$day/$camera_name/";
          if ( ! -e $directory ) {
              make_path($directory, { verbose => 1 }) or die "Unable to mkdir --parent $directory";
          }
          return $directory;
      }
    #+END_SRC    
*** NEW_PROGRAM-second_subroutine
*** NEW_PROGRAM-third-subroutine
* Testing => http://www.perl.org/about/whitepapers/perl-testing.html
** ./testing/appconfig-args.pl
   #+BEGIN_SRC perl :tangle ./testing/appconfig-args.pl :shebang #!/usr/bin/perl
     #!/usr/bin/perl
     # appconfig-args.pl

     use AppConfig;

     my $config = AppConfig->new;
     my $verbose;

     $config->define( 'network_email=s'  );
     $config->define( 'book_author=s'    );
     $config->define( 'book_title=s'     );
     $config->define( 'book_publisher=s' );
     $verbose = $config->define("verbose");
     print "DEBUG1: $verbose\n";

     $config->file( 'config.ini' );

     my $email  = $config->get( 'network_email' );
     my $author = $config->get( 'book_author' );
     # $verbose = $config->get( 'verbose' );
     print "DEBUG2: $verbose\n";

     $config->args();
     #  $config->getopt();

     print "Kindly send complaints to $author ($email)\n";
     print "DEBUG3: $verbose\n";
   #+END_SRC
   #+BEGIN_SRC conf :tangle ./testing/config.ini
     network_email=brian.d.foy@gmail.com
     book_author=brian d foy
     verbose = On
   #+END_SRC
   #+BEGIN_SRC sh
     ./appconfig-args.pl -network_email troydwill@gmail.com
   #+END_SRC
* Troubleshooting
** AppConfig Flag
   #+BEGIN_SRC perl :tangle ./troubleshooting/appconfig-flag.pl :shebang #!/usr/bin/env perl
     # appconfig-flag.pl

     use AppConfig;

     my $config = AppConfig->new;

     $verbose = $config->define( 'verbose' );

     $config->getopt();

     my $verbose  = $config->get( 'verbose' );
     print "verbose = $verbose\n";
   #+END_SRC
